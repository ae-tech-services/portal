async function fetchExpiration() { let userIDElement = document.querySelector("#userID span"), macElement = document.getElementById("mac"), userID = userIDElement ? userIDElement.textContent.trim() : ""; if (!userID && macElement) userID = macElement.textContent.trim().replace(/:/g, ""); if (!userID) { document.getElementById("exp12").textContent = "Not Available"; return; } let filePath = `data/${userID}.txt`; try { let response = await fetch(filePath, { cache: "no-store" }); if (!response.ok) throw new Error("File not found"); let fileContent = await response.text(), expData = fileContent.split("#")[1]?.trim(); if (!expData) { document.getElementById("exp12").textContent = "No Expiration"; return; } let formattedExp = expData.includes(":") && !expData.includes("/") ? convertTo12HourFormatWithDate(expData) : convertTo12HourFormat(expData); document.getElementById("exp12").textContent = formattedExp; } catch (error) { document.getElementById("exp12").textContent = "Not Available"; } } function convertTo12HourFormatWithDate(timeText) { let today = new Date(), datePart = `${today.toLocaleString('en-US', { month: 'short' })}/${String(today.getDate()).padStart(2, "0")}`; return convertTo12HourFormat(`${datePart} ${timeText}`); } function convertTo12HourFormat(dateTimeText) { if (!dateTimeText) return "No Expiration"; let parts = dateTimeText.split(" "); if (parts.length < 2) return dateTimeText; let datePart = parts[0], timePart = parts[1], [hours, minutes, seconds] = timePart.split(":").map(Number); if (isNaN(hours) || isNaN(minutes) || isNaN(seconds)) return dateTimeText; let period = hours >= 12 ? "PM" : "AM"; return `${datePart} ${(hours % 12 || 12)}:${String(minutes).padStart(2, "0")}:${String(seconds).padStart(2, "0")} ${period}`; } document.addEventListener("DOMContentLoaded", () => { fetchExpiration(); setInterval(fetchExpiration, 1000); });
